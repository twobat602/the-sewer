local player = game.Players.LocalPlayer
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "The Sewer", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local savedLocations = {}

-- Create the "Player" tab
local TabPlayer = Window:MakeTab({
    Name = "Player",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local selectedPlayer = nil
local playerDropdown

-- Function to update the dropdown menu with current players
local function updatePlayerDropdown()
    local playerNames = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    playerDropdown:Refresh(playerNames)
end

-- Add a dropdown to select a player
playerDropdown = TabPlayer:AddDropdown({
    Name = "Select Player",
    Default = "",
    Options = {},
    Callback = function(value)
        selectedPlayer = game.Players:FindFirstChild(value)
    end
})

-- Button to teleport to the selected player
TabPlayer:AddButton({
    Name = "Teleport to Player",
    Callback = function()
        if selectedPlayer and selectedPlayer.Character then
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            local targetRootPart = selectedPlayer.Character:WaitForChild("HumanoidRootPart")
            humanoidRootPart.CFrame = targetRootPart.CFrame * CFrame.new(0, 5, 0)

            OrionLib:MakeNotification({
                Name = "Teleported",
                Content = "You have been teleported to " .. selectedPlayer.Name .. "!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No player selected or player has no character!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

-- Update the dropdown when players join or leave
updatePlayerDropdown()

game.Players.PlayerAdded:Connect(updatePlayerDropdown)
game.Players.PlayerRemoving:Connect(updatePlayerDropdown)

-- Fly Script
local flying = false
local speed = 50
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

-- Detect if Mobile Device
local UIS = game:GetService("UserInputService")
local isMobile = UIS.TouchEnabled and not UIS.KeyboardEnabled and not UIS.MouseEnabled

-- Fly/Unfly Function
local function toggleFly()
    flying = not flying
    if flying then
        -- Adjust speed if mobile device
        local adjustedSpeed = isMobile and (speed / 2) or speed
        
        local bv = Instance.new("BodyVelocity", hrp)
        bv.Velocity = Vector3.new(0, 0, 0)
        bv.MaxForce = Vector3.new(400000, 400000, 400000)
        
        local bg = Instance.new("BodyGyro", hrp)
        bg.MaxTorque = Vector3.new(400000, 400000, 400000)
        bg.P = 100000
        
        game:GetService("RunService").Stepped:Connect(function()
            if flying then
                local moveDir = player.Character:FindFirstChildOfClass("Humanoid").MoveDirection
                if moveDir.Magnitude > 0 then
                    bv.Velocity = workspace.CurrentCamera.CFrame.LookVector * adjustedSpeed
                else
                    bv.Velocity = Vector3.new(0, 0, 0)
                end
                bg.CFrame = workspace.CurrentCamera.CFrame
            else
                bv:Destroy()
                bg:Destroy()
            end
        end)
    end
end



-- Add Fly Button to the "Player" Tab
TabPlayer:AddButton({
    Name = "Toggle Fly",
    Callback = function()
        toggleFly()
    end
})

-- Add Speed Adjustment Textbox
TabPlayer:AddTextbox({
    Name = "Set Fly Speed",
    Default = tostring(speed),
    TextOnly = true,
    Callback = function(value)
        speed = tonumber(value) or 50
    end
})

-- Fly Keybind (C)
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.C then
        toggleFly()
    end
end)

-- Reset Fly Function on Character Respawn
player.CharacterAdded:Connect(function(character)
    -- Reinitialize the flying script whenever the character respawns
    hrp = character:WaitForChild("HumanoidRootPart")
    flying = false  -- Reset flying status
end)

-- Create the "Collect" tab
local TabCollect = Window:MakeTab({
    Name = "Collect",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local SectionCollect = TabCollect:AddSection({
    Name = "Collect Items"
})

-- Burger teleportation
TabCollect:AddButton({
    Name = "Burger",
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local originalPosition = humanoidRootPart.CFrame
        
        local function teleportPlayerToBurger(burger)
            if burger then
                local burgerPosition = burger.PrimaryPart and burger.PrimaryPart.CFrame or burger.CFrame
                character:SetPrimaryPartCFrame(burgerPosition * CFrame.new(0, 5, 0))
            end
        end

        local function teleportToDifferentBurgers()
            local burgers = {}
            for _, obj in pairs(game.Workspace.DynamicFurniture:GetChildren()) do
                if obj.Name == "Burger" then
                    table.insert(burgers, obj)
                end
            end
            for i = 1, 3 do
                if burgers[i] then
                    teleportPlayerToBurger(burgers[i])
                    wait(4)
                end
            end
            character:SetPrimaryPartCFrame(originalPosition)
        end

        teleportToDifferentBurgers()

        OrionLib:MakeNotification({
            Name = "Burger Teleport",
            Content = "You have been teleported to the Burgers!",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- ScrapPile teleportation
TabCollect:AddButton({
    Name = "ScrapPile",
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local originalPosition = humanoidRootPart.CFrame
        
        local function teleportPlayerToScrapPile(scrapPile)
            if scrapPile then
                local scrapPilePosition = scrapPile.PrimaryPart and scrapPile.PrimaryPart.CFrame or scrapPile.CFrame
                character:SetPrimaryPartCFrame(scrapPilePosition * CFrame.new(0, 5, 0))
            end
        end

        local function teleportToDifferentScrapPiles()
            local scrapPiles = {}
            for _, obj in pairs(game.Workspace.DynamicFurniture:GetChildren()) do
                if obj.Name == "ScrapPile" then
                    table.insert(scrapPiles, obj)
                end
            end
            for i = 1, 3 do
                if scrapPiles[i] then
                    teleportPlayerToScrapPile(scrapPiles[i])
                    wait(4)
                end
            end
            character:SetPrimaryPartCFrame(originalPosition)
        end

        teleportToDifferentScrapPiles()

        OrionLib:MakeNotification({
            Name = "ScrapPile Teleport",
            Content = "You have been teleported to the ScrapPiles!",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- Cheese teleportation
TabCollect:AddButton({
    Name = "Cheese",
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local originalPosition = humanoidRootPart.CFrame
        
        local function teleportPlayerToCheese(cheese)
            if cheese then
                local cheesePosition = cheese.PrimaryPart and cheese.PrimaryPart.CFrame or cheese.CFrame
                character:SetPrimaryPartCFrame(cheesePosition * CFrame.new(0, 5, 0))
            end
        end

        local function teleportToDifferentCheese()
            local cheeses = {}
            for _, obj in pairs(game.Workspace.DynamicFurniture:GetChildren()) do
                if obj.Name == "Cheese" then
                    table.insert(cheeses, obj)
                end
            end
            for i = 1, 3 do
                if cheeses[i] then
                    teleportPlayerToCheese(cheeses[i])
                    wait(4)
                end
            end
            character:SetPrimaryPartCFrame(originalPosition)
        end

        teleportToDifferentCheese()

        OrionLib:MakeNotification({
            Name = "Cheese Teleport",
            Content = "You have been teleported to the Cheese!",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- BottlePack teleportation
TabCollect:AddButton({
    Name = "BottlePack",
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local originalPosition = humanoidRootPart.CFrame
        
        local function teleportPlayerToBottlePack(bottlePack)
            if bottlePack then
                local bottlePackPosition = bottlePack.PrimaryPart and bottlePack.PrimaryPart.CFrame or bottlePack.CFrame
                character:SetPrimaryPartCFrame(bottlePackPosition * CFrame.new(0, 5, 0))
            end
        end

        local function teleportToDifferentBottlePacks()
            local bottlePacks = {}
            for _, obj in pairs(game.Workspace.DynamicFurniture:GetChildren()) do
                if obj.Name == "BottlePack" then
                    table.insert(bottlePacks, obj)
                end
            end
            for i = 1, 3 do
                if bottlePacks[i] then
                    teleportPlayerToBottlePack(bottlePacks[i])
                    wait(4)
                end
            end
            character:SetPrimaryPartCFrame(originalPosition)
        end

        teleportToDifferentBottlePacks()

        OrionLib:MakeNotification({
            Name = "BottlePack Teleport",
            Content = "You have been teleported to the BottlePacks!",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- Create the "Set Home" tab
local TabHome = Window:MakeTab({
    Name = "Set Home",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local SectionHome = TabHome:AddSection({
    Name = "Home"
})

-- Button to Save Position
TabHome:AddButton({
    Name = "Save Position",
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        savedLocations[player.UserId] = humanoidRootPart.Position
        
        OrionLib:MakeNotification({
            Name = "Position Saved",
            Content = "Your position has been saved as your home.",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- Button to Teleport to Saved Position
TabHome:AddButton({
    Name = "Teleport Home",
    Callback = function()
        local savedPosition = savedLocations[player.UserId]
        if savedPosition then
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            humanoidRootPart.CFrame = CFrame.new(savedPosition)

            OrionLib:MakeNotification({
                Name = "Teleported",
                Content = "You have been teleported to your saved home position.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No home position saved.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

-- Create the "Bring Player" tab
local TabBringPlayer = Window:MakeTab({
    Name = "Bring Player",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local beanBagButton = TabBringPlayer:AddButton({
    Name = "Get Beanbag",
    Callback = function()
        -- Find the BeanBag in the DynamicFurniture folder
        local beanBag = nil
        for _, obj in pairs(game.Workspace.DynamicFurniture:GetChildren()) do
            if obj.Name == "BeanBag" and not obj:FindFirstChild("Owner") then
                beanBag = obj
                break
            end
        end
        
        if beanBag then
            -- Teleport the BeanBag to the player
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            beanBag:SetPrimaryPartCFrame(humanoidRootPart.CFrame * CFrame.new(0, 5, 0))

            OrionLib:MakeNotification({
                Name = "Beanbag Teleported",
                Content = "The Beanbag has been teleported to you!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No available BeanBag found to teleport.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

-- Create the "Server" tab
local TabServer = Window:MakeTab({
    Name = "Server",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Rejoin Button
TabServer:AddButton({
    Name = "Rejoin Server",
    Callback = function()
        local placeId = game.PlaceId
        local jobId = game.JobId
        game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, jobId, player)
    end
})

-- ServerHop Button
TabServer:AddButton({
    Name = "Server Hop",
    Callback = function()
        local placeId = game.PlaceId
        local httpService = game:GetService("HttpService")
        local servers = {}
        local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"

        local success, response = pcall(function()
            return httpService:JSONDecode(game:HttpGet(url))
        end)

        if success and response and response.data then
            for _, server in pairs(response.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(servers, server.id)
                end
            end
        end

        if #servers > 0 then
            local randomServer = servers[math.random(1, #servers)]
            game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, randomServer, player)
        else
            OrionLib:MakeNotification({
                Name = "Server Hop Failed",
                Content = "No other servers found!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})


-- Initialize GUI
OrionLib:Init()
